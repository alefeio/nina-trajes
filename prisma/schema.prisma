// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt         DateTime @default(now()) // Adicionado
  updatedAt         DateTime @updatedAt // Adicionado

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now()) // Adicionado
  updatedAt    DateTime @updatedAt // Adicionado
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String?   @default("USER")
  accounts      Account[]
  sessions      Session[]
  site          Site?     // Relacionamento com o novo model Site
  createdAt     DateTime  @default(now()) // Adicionado
  updatedAt     DateTime  @updatedAt // Adicionado
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) // Adicionado
  updatedAt  DateTime @updatedAt // Adicionado

  @@unique([identifier, token])
}

model Menu {
  id      Int     @id @default(1)
  logoUrl String?
  links   Json
}

model Banner {
  id      Int  @id @default(1)
  banners Json
}

model HomepageSection {
  id        String    @id @default(cuid())
  type      String
  order     Int
  content   Json
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Testimonial {
  id        String    @id @default(cuid())
  name      String
  type      String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model FAQ {
  id        String    @id @default(cuid())
  pergunta  String
  resposta  String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Destino {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  subtitle    String?
  description Json       // descrição rica com títulos, parágrafos e tabelas
  image       String?
  order       Int       @default(0)  // <-- campo adicionado
  pacotes     Pacote[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?
}

model Pacote {
  id          String      @id @default(cuid())
  title       String
  subtitle    String?
  slug        String      @unique
  description Json
  destino     Destino     @relation(fields: [destinoId], references: [id], onDelete: Cascade)
  destinoId   String
  fotos       PacoteFoto[]
  dates       PacoteDate[]
  like        Int         @default(0)
  view        Int         @default(0)
  whatsapp    Int         @default(0)  // <-- Novo campo para contagem de cliques no WhatsApp
  shared      Int         @default(0)  // <-- Novo campo para contagem de cliques em Compartilhar
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  deletedAt   DateTime?
}

model PacoteFoto {
  id        String   @id @default(cuid())
  url       String
  caption   String?
  pacote    Pacote   @relation(fields: [pacoteId], references: [id], onDelete: Cascade)
  pacoteId  String
  like      Int      @default(0) // curtidas da foto
  view      Int      @default(0) // visualizações da foto
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PacoteDate {
  id                  String   @id @default(cuid())
  saida               DateTime
  retorno             DateTime
  vagas_total         Int
  vagas_disponiveis   Int
  price               Int
  price_card          Int
  status              String
  notes               String?
  whatsapp            Int      @default(0)  // <-- Novo campo para contagem de cliques no WhatsApp
  pacote              Pacote   @relation(fields: [pacoteId], references: [id], onDelete: Cascade)
  pacoteId            String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  @@unique([pacoteId, saida])
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     Json     // editor rico (títulos, parágrafos, imagens, tabelas)
  coverImage  String?
  author      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  deletedAt   DateTime?
}

// Novo model 'Site'
model Site {
  id                   String    @id @default(cuid())
  userId               String    @unique
  user                 User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tag_google_ads       String?
  tag_google_analytics String?
  tag_meta             String?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
}

model Subscriber {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  phone     String?
  createdAt DateTime  @default(now())
}

model Gallery {
  id     String @id @default(uuid())
  title  String
  slug   String @unique
  photos GalleryPhoto[]
}

model GalleryPhoto {
  id        String  @id @default(uuid())
  url       String
  altText   String?
  galleryId String
  gallery   Gallery @relation(fields: [galleryId], references: [id])
}